// time limit exceeded
int Solution::minDistance(string A, string B) 
{
    if (A.size() == 0)
    {
        // only option is to insert into A the chars remaining in B
        return B.size();
    }
    
    if (B.size() == 0)
    {
        // only option is to delete the chars remaining in A
        return A.size();
    }
    
    // if last chars are the same, ignore and get dist for remainder
    if (A[A.size()-1] == B[B.size()-1])
    {
        return minDistance( A.substr(0, A.size()-1), B.substr(0, B.size()-1) );
    }
    
    // else try each possible action and determine min result
    return (1 + 
            min (
                min (
                    // assume insert char at end of A to = B
                    // lop off last char from B and recurse
                    minDistance( A, B.substr(0, B.size()-1) ),
                    // assume delete last char of A
                    // lop off last char from A and recurse
                    minDistance( A.substr(0, A.size()-1), B ) 
                    ),
                // assume replace last char of A to = B
                // lop off last chars from each and recurse)
                minDistance( A.substr(0, A.size()-1), B.substr(0, B.size()-1) )
                )
            );
}
