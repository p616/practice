Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

Example :
Given array A = [2,3,1,1,4]

The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)

If it is not possible to reach the end index, return -1.


int Solution::jump(vector<int> &A) 
{
    int DP[A.size()];
    
    // fill in from right to left
    
    // min jumps from dest to dest = 0
    DP[A.size()-1] = 0;
    
    for (int i = A.size()-2; i>=0; i--)
    {
        // if val is zero, can't do this jump
        if (A[i] == 0)
        {
            DP[i] = -1;
        }
        else if ( (A[i] + i) >= (A.size()-1) )
        {
            DP[i] = 1;
        }
        // calculate min jumps from pos=i
        // try max=A[pos], max-1, etc, down to 1
        // -1 = not possible
        else
        {
            DP[i] = -1;
            for (int j = 1; j<=A[i]; ++j)
            {
                // dist = pos(i) + j
                // jumpcost = 1 + min at dist pos = 1 + DP[i+j]
                // if dist goes past end of array, this jump not possible (nor are rest)
                // if dist goes to another not possible position, this jump not possible
                if ((i+j) >= A.size()) 
                {
                    DP[i] = max(DP[i], -1);
                    break;
                }
                else if (DP[i+j] == -1)
                {
                    DP[i] = max(DP[i], -1);   
                }
                else 
                {
                    int jump = (1 + DP[i+j]);
                    if (DP[i] == -1)
                    {
                        DP[i] = jump;
                    }
                    else
                    {
                        DP[i] = min(DP[i], jump);  
                    }
                }
            }
         }
    }
    
    return DP[0];
}
