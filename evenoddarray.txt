A subarray A[i], A[i+1], ..., A[j] of A is said to be turbulent if and only if:

    For i <= k < j, A[k] > A[k+1] when k is odd, and A[k] < A[k+1] when k is even;
    OR, for i <= k < j, A[k] > A[k+1] when k is even, and A[k] < A[k+1] when k is odd.

That is, the subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

Return the length of a maximum size turbulent subarray of A.

 
    int maxTurbulenceSize(vector<int>& A)
    {
        if (A.size() == 0)
        {
            return 0;
        }
        else if (A.size() == 1)
        {
            return 1;
        }
        
        int maxcount = numeric_limits<int>::min();
        int count = 0;
        
        bool less = false;       
        if (A[0] < A[1])
        {
            less = true;
        }
        
        int start = 0;
        for (int i = 0; i < A.size()-1; ++i)
        {
            bool end = true;
            
            if (A[i] == A[i+1])
            {
                // done with current run
                if (count > maxcount)
                {
                    maxcount = count;
                }
                count = 0;
            }
            else if (count == 0)
            {
                // find current relation and init count for it
                less = (A[i] < A[i+1]);
                count = 2;
                // set next expected
                less = !less;
            }
            else
            {
                // in the middle of a run
                // is direction what's expected?
                if ( (less && (A[i] < A[i+1])) ||
                     (!less && (A[i] > A[i+1])) )
                {
                    count++;
                    less = !less;
                }
                else
                {                    
                    // done with current run
                    if (count > maxcount)
                    {
                        maxcount = count;
                    }
                    
                    // less is opposite of what was expected
                    // leave it as-is (as now it is expected next)
                    // intialize count as 2 for this relation
                    count = 2;
                }                  
            }            
        }
               
        // one last check for end run
        if (count > maxcount)
        {
            maxcount = count;
        }
        
        return maxcount;
    }