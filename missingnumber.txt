Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

Example 1:

Input: [3,0,1]
Output: 2

Example 2:

Input: [9,6,4,2,3,5,7,0,1]
Output: 8


    int missingNumber(vector<int>& nums) 
    {
        // sum of numbers 1..N - sum of vector = missing #
        
        // one missing + includes 0 => max # = size
        int N = nums.size(); 
        
        // (N * (N+1)) div 2
        int sumN = (N * (N+1)) >> 1;  
        
        for (int n : nums)
        {
            sumN -= n;
        }
        
        return sumN;        
    }


Followup:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?

    Time complexity : O(n)

    Although Gauss' formula can be computed in O(1)time, summing nums costs us O(n)time, so the algorithm is overall linear. Because we have no information about which number is missing, an adversary could always design an input for which any algorithm that examines fewer than nnn numbers fails. Therefore, this solution is asymptotically optimal.

    Space complexity : O(1)

    This approach only pushes a few integers around, so it has constant memory usage.
