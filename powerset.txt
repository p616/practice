Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

    vector<vector<int>> subsets(vector<int>& nums)
    {
        vector<vector<int>> allSubsets;
        
        // add the empty set to vector of subsets
        vector<int> empty;
        allSubsets.push_back(empty);
        
        // 2 raised to nums.size() power = number of possible subsets
        // subtract 1 for the empty set, already added
        // so, subsets mask has one bit set for each element in the set
        int powerSetMask = (pow(2, nums.size()) - 1);
                
        // iterate through subMasks of powerSetMask
        for (int subs = powerSetMask; subs != 0; subs = ((subs - 1) & powerSetMask))
        {      
            vector<int> v;
            
            // iterate through each set bit in subMask
            int subMask = subs;
            while (subMask != 0)
            {
                // get left-most set bit
                int leftBit = (subMask & -subMask);
                
                // convert bit value to vector index
                int index = log2(leftBit & powerSetMask);
                
                // add num corresponding to index to subset vector
                v.push_back(nums[index]);
                
                // unset current bit in subMask
                subMask = subMask & ~leftBit;
            }
            
            // add subset to vector of subsets
            allSubsets.push_back(v);
        }
        
        return allSubsets;
    }
