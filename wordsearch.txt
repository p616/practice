Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.



    const int NUMMOVES = 4;
    
    const vector<int> ROWMASK = { 1, -1, 0,  0 };
    const vector<int> COLMASK = { 0,  0, 1, -1 };
    
    bool IsValid(int x, int y, int rows, int cols)
    {
        return (x >=0 && y >= 0 && x < rows && y < cols);
    }
    
    bool FindTheWord(vector<vector<char>>& board, string word, int x, int y, int strIndex)
    {
        // exit conditions
        
        // does this spot have the right letter in it
        if (board[x][y] != word[strIndex])
        {
            // no need to continue with this path
            return false;
        }
        
        // is this the last letter in the word?
        if (strIndex == word.size()-1)
        {
            // found the word, done
            return true;
        } 
        
        // make sure letter isn't used again
        char c = board[x][y];
        if (isupper(c))
        {
            board[x][y] = tolower(c);
        }
        else
        {
            board[x][y] = toupper(c);
        }
        
        // continue to next letter : try up, down, left, right...
        int nextLetter = strIndex + 1;
        for (int i=0; i<NUMMOVES; ++i)
        {
            int newX = x + ROWMASK[i];
            int newY = y + COLMASK[i];
            
            if (IsValid(newX, newY, board.size(), board[0].size()))
            {
                
                if (FindTheWord(board, word, newX, newY, nextLetter))
                {
                    // done
                    return true;
                }
            }
        }
        
        // backtrack
        if (isupper(c))
        {
            board[x][y] = toupper(c);
        }
        else
        {
            board[x][y] = tolower(c);
        }
                
        return false;
    }
    
    bool exist(vector<vector<char>>& board, string word) 
    {
        bool found = false;
        for (int i=0; i<board.size(); ++i) 
        {
            for (int j=0; j<board[0].size(); ++j)
            {
                if (FindTheWord(board, word, i, j, 0))
                {
                    found = true;
                    break;
                }
             }
           
        }
        return found;
    }
                