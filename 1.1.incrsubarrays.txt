PASSED

You are given an array of N positive integers, A1, A2 ,…, AN.

Let’s denote by A[i, j] the subarray Ai, Ai+1 ,…, Aj.

Count pairs (i, j) such that 1 = i = j = N and subarray A[i, j] is increasing. Return the value modulo 109 + 7.

Notes

    A subarray A1, A2 ,…, AN is increasing if Ai < Ai+1, for all 1 = i < N.

For example,

A=[4, 5, 1, 2]

All subarrays of size 1 are increasing.

Subarrays A[1, 2], A[3, 4] of size 2 are increasing.

No subarray of size 3 and 4 is increasing.

So, total of 6 subarrays are increasing.



#include <iostream>     // cin/cout
#include <vector>
#include <set>
#include <map>
#include <stack>
#include <queue>
#include <limits>       // numeric_limits<T>::max()
#include <climits>      // INT_MAX
#include <cmath>        // pow
#include <algorithm>    // sort
#include <utility>      // pair

using namespace std;

int cntInc(vector<int> &A) 
{
    if (A.size() == 0)
    {
        return 0;
    }

    int count = 0;
    
    int maxInc = 1;
    int i=1;
    while (i < A.size())
    {
        if (A[i-1] < A[i])
        {
            count += maxInc++;
        }
        else
        {
            count += maxInc;
            maxInc = 1;
        }
        i++;
    }
    
    return ( count % (int)(pow(10,9)+7) );
}