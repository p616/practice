Given the root of a binary tree with N nodes, each node in the tree has node.val coins, and there are N coins total.

In one move, we may choose two adjacent nodes and move one coin from one node to another.  (The move may be from parent to child, or from child to parent.)

Return the number of moves required to make every node have exactly one coin.

 

Example 1:

Input: [3,0,0]
Output: 2
Explanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.

Example 2:

Input: [0,3,0]
Output: 3
Explanation: From the left child of the root, we move two coins to the root [taking two moves].  Then, we move one coin from the root of the tree to the right child.

Example 3:

Input: [1,0,2]
Output: 2

Example 4:

Input: [1,0,0,null,3]
Output: 4

 

    int distributeCoins(TreeNode* root) 
    {
        int moves = 0;
        traverse(root, NULL, moves);
        return moves;
    }
    
    int countCoins(TreeNode *node)
    {
        if (node == NULL)
        {
            return 0;
        }
        
        // total coins in this node 
        // -1 as this node needs 1
        int coins = (node->val - 1);
        
        coins += countCoins(node->left);
        coins += countCoins(node->right); 
        
        return coins;
    }
    
    void moveCoins(TreeNode *node, TreeNode *subtree, int coins, int& moves)
    {          
        node->val -= coins;
        subtree->val += coins;
        moves += coins;  
    }
    
    void traverse(TreeNode *node, TreeNode *parent, int& moves)
    {
        if (node == NULL)
        {
            return;
        }
                
        // countCoins returns (total coins in subtree - number of nodes in subtree)
        //  ==> lCount = number of coins needed by left subtree 
        //  ==> rCount = number of coins needed by right subtree 
        int lCount = countCoins(node->left);
        int rCount = countCoins(node->right);
        
        if ( (lCount < 0) && (rCount < 0) ) 
        {                
            // move needed coins from this node to left and right subtrees 
            // traverse each subtree to distribute those coins
            // update total moves  
            
            // lCount = neg => left not null, needs abs(lCount) coins from this node          
            moveCoins(node, node->left, abs(lCount), moves);
            traverse(node->left, node, moves);
            
            // rCount = neg => right not null, needs abs(rCount) coins from this node
            moveCoins(node, node->right, abs(rCount), moves);
            traverse(node->right, node, moves);
        }
        else if (lCount < 0)
        {
            // left tree needs coins 
            // right either has excess (pos) or exactly enough (0) or is null (0)
            
            // traverse right subtree first, to distribute its coins 
            // in doing so, it might update the number of coins in this node
            traverse(node->right, node, moves);
            
            // move needed coins from this node to left subtree
            // traverse left subtree to distribute those coins
            // update total moves            
            moveCoins(node, node->left, abs(lCount), moves);
            traverse(node->left, node, moves);

        }
        else if (rCount < 0)
        {
            // right tree needs coins
            // left either has excess (pos) or exactly enough (0) or is null (0)=
            
            // traverse left subtree first, to distribute its coins 
            // in doing so, it might update the number of coins in this node
            traverse(node->left, node, moves);
            
            // move needed coins from this node to right subtree
            // traverse right subtree to distribute those coins
            // update total moves            
            moveCoins(node, node->right, abs(rCount), moves);
            traverse(node->right, node, moves);        
        }
        else
        {
            // both subtrees have either more than they need (pos) or exactly enough (0) or are null (0)
            
            // just traverse those trees to distribute their coins
            traverse(node->left, node, moves);
            traverse(node->right, node, moves);
        }
        
        // left and right subtress of this node should now be balanced
        // move any excess coins from this node to its parent (if it has one) and update moves
        if ( (parent != NULL) && (node->val > 1) )
        {
            moveCoins(node, parent, (node->val - 1), moves);
        }
    }