/* Iterative program to print levels line by line */
#include <iostream> 
#include <queue> 
using namespace std; 
  
// A Binary Tree Node 
struct node 
{ 
    struct node *left; 
    int data; 
    struct node *right; 
}; 
  
// Iterative method to do level order traversal line by line 
void printLevelOrder(node *root) 
{ 
    // Base Case 
    if (root == NULL)  return; 
  
    // Create an empty queue for level order tarversal 
    queue<node *> q; 
  
    // Enqueue Root and initialize height 
    q.push(root); 
  
    while (1) 
    { 
        // nodeCount (queue size) indicates number of nodes 
        // at current lelvel. 
        int nodeCount = q.size(); 
        if (nodeCount == 0) 
            break; 
            
        // Print first node at each level
        cout << q.front()->data << endl;  
  
        // Dequeue all nodes of current level and Enqueue all 
        // nodes of next level 
        while (nodeCount > 0) 
        { 
            node *node = q.front(); 
            q.pop();

            if (node->left != NULL) 
                q.push(node->left); 
            if (node->right != NULL) 
                q.push(node->right); 
            nodeCount--; 
        } 
    } 
} 
  
// Utility function to create a new tree node 
node* newNode(int data) 
{ 
    node *temp = new node; 
    temp->data = data; 
    temp->left = NULL; 
    temp->right = NULL; 
    return temp; 
} 
  
// Driver program to test above functions 
int main() 
{ 
    // Let us create binary tree shown above 
    node *root = newNode(1); 
    root->left = newNode(2); 
    root->right = newNode(3); 
    root->left->left = newNode(4); 
    root->left->right = newNode(5); 
    root->left->right->left = newNode(6); 
    root->left->right->right= newNode(7); 
    root->right->right = newNode(8);
    root->right->right->right = newNode(9);
    root->right->right->right->right = newNode(10);
    root->right->right->right->right->right = newNode(11);
  
    printLevelOrder(root); 
    return 0; 
}
