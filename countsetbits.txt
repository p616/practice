

int Solution::numSetBits(unsigned int A) 
{
    int count = 0;
    int mask = 0x1b;
    for (int i=0; i<32; ++i)
    {
        if ((A & mask) == mask)
        {
            count++;
        }
        mask = mask << 1;
    }
    return count;
}

Hamming weight = number of '1' bits

    int hammingWeight(uint32_t n) 
    {
        int count = 0;
        while (n > 0)
        {
            if (n & 1 == 1)
            {
                count++;
            }
            n = n>>1;
        }
        return count;
    }


Given a non negative integer number num. For every numbers i in the range 0 = i = num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]

Example 2:

Input: 5
Output: [0,1,1,2,1,2]

    int setBits(uint32_t n) 
    {
        int count = 0;
        while (n > 0)
        {
            if (n & 1 == 1)
            {
                count++;
            }
            n = n>>1;
        }
        return count;
    }    
    vector<int> countBits(int num) 
    {
        vector<int> oneBits;
        
        for (int i=0; i<=num; ++i)
        {
            oneBits.push_back(setBits(i));
        }
        
        return oneBits;
    }

Follow up:
It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?

    vector<int> countBits(int num) {
        vector<int> ret(num + 1, 0);
        for(int i = 1; i <= num; ++ i) {
            ret[i] = ret[i & (i - 1)] + 1;
        }
        return ret;
    }

    vector<int> countBits(int num) {
        vector<int> dp(num+1,0);
        for(int i=1;i<=num;i++){
            dp[i] = dp[i/2];
            if(i%2==1) dp[i]++;
        }
        
        return dp;
    }
0