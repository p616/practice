#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

class Heap
{
public:
  Heap() {}

  void AddNode(int val);
  void DeleteNode(int val);
  void PrintMin();

private:
    vector<int> HeapArray;

    void HeapifyUp(int index);
    void HeapifyDown(int index);

    int Left(int i) { return 2*i+1; }
    int Right(int i) { return 2*i+2; }
    int Parent(int i);
};

void
Heap::AddNode(int val)
{
  // insert into array
  HeapArray.push_back(val);

  // re-heapify up the tree from new item
  HeapifyUp(HeapArray.size()-1);
}

void
Heap::DeleteNode(int val)
{
  int last = HeapArray.back();
  HeapArray.pop_back();

  if (last != val)
  {
    int del;
    for (int i=0; i<HeapArray.size(); i++)
    {
        if (HeapArray[i] == val)
        {
          del = i;
          break;
        }
    }
    HeapArray[del] = last;

    // re-heapify down the tree from deleted item
    HeapifyDown(del);
  }
}

void 
Heap::PrintMin()
{
  if (!HeapArray.empty())
  {
    cout << HeapArray[0] << "\n";
  }
}

int
Heap::Parent(int index)
{
  if (index < 3)
  {
    return 0;
  }

  if (index % 2 == 0)
  {
    return ((index - 2) / 2);
  }

  return ((index - 1) / 2);
}

// Maintain heap structure : bottom-up
void
Heap::HeapifyUp(int index)
{
  int parent = Parent(index);
  int largest = index;

  // verify value at current index larger than parent

  if (HeapArray[parent] > HeapArray[index])
  {
    largest = parent;
  }

  if (largest != index)
  {
    int temp = HeapArray[index];
    HeapArray[index] = HeapArray[largest];
    HeapArray[largest] = temp;
    HeapifyUp(largest);
  }
}

// Maintain Heap structure : top-down
void
Heap::HeapifyDown(int index)
{
  int left = Left(index);
  int right = Right(index);
  int smallest = index;

  // verify left and right values smaller than value at current index

  if (left < HeapArray.size() && HeapArray[left] < HeapArray[smallest])
  {
    smallest = left;
  }
  if (right < HeapArray.size() && HeapArray[right] < HeapArray[smallest])
  {
    smallest = right;
  }

  if (smallest != index)
  {
    int temp = HeapArray[index];
    HeapArray[index] = HeapArray[smallest];
    HeapArray[smallest] = temp;
    HeapifyDown(smallest);
  }
}

int main() {
    /* Enter yownour code here. Read input from STDIN. Print output to STDOUT */  
    int numQueries = 0;
    cin >> numQueries;

    Heap heap;

    for (int i=0; i<numQueries; ++i) 
    {
      int op;
      cin >> op;

      if (op == 1)
      {
        int val;
        cin >> val;

        heap.AddNode(val);
      }
      else if (op == 2)
      {
        int val;
        cin >> val;

        heap.DeleteNode(val);
      }
      else if (op == 3)
      {
        heap.PrintMin();
      }
    }
    return 0;
}
