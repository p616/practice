WORKS, JUST NOT FAST ENOUGH...DP.

Defining substring
For a string P with characters P1, P2 ,…, Pq, let us denote by P[i, j] the substring Pi, Pi+1 ,…, Pj.

Defining longest common subsequence(LCS)
A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. LCS(A, B) of 2 sequences A and B is a subsequence, with maximal length, which is common to both the sequences.

Given a string S with small alphabet characters S1, S2 ,…, SN, return an array with two elements. First is the smallest j (1 = j < N) for which LCS(S[1, j], rev(S[j + 1, N])) is maximal and second is the maximal value of LCS(S[1, j], rev(S[j + 1, N])).
Here, rev(A) denotes reverse of string A.

For example,

S="abba"

LCS(S[1, 1], rev(S[2, 4])) = LCS("a", "abb") = 1
LCS(S[1, 2], rev(S[3, 4])) = LCS("ab", "ab") = 2
LCS(S[1, 3], rev(S[4, 4])) = LCS("abb", "a") = 1

Hence, we return [2, 2].



int LCS(string A, string B)
{
    int DP[A.size()+1][B.size()+1];
    
    // LCS if either string empty = 0
    // if A[A.size()-1] == B[A.size()-1] 
    //      LCS[A[0..A.size()-1],B[0..B.size()-1]] = 1 + (LCS(A[0..A.size()-2], B[0..B.size()-2])
    // else = max (LCS (end, end-1) and LCS(end-1,end))
    
    for (int i=0; i<=A.size(); ++i)
    {
        for (int j=0; j<=B.size(); ++j)
        {
            if ( (i==0) || (j==0) )
            {
                DP[i][j] = 0;
            }
            else if (A[i-1] == B[j-1])
            {
                DP[i][j] = (1 + DP[i-1][j-1]);
            }
            else
            {
                DP[i][j] = max(DP[i-1][j], DP[i][j-1]);
            }
        }
    }
    
    return DP[A.size()][B.size()];
}

vector<int> Solution::maxLCS(string A) 
{
    // maximize for smallest j:
    // LCS(S[1, j], rev(S[j + 1, N]))
    // i.e. return maximal LCS val
    //      if 2 have same LCS, return the smallest j for that max
    
    // ex: 
    // S="abba"
    // LCS(S[1, 1], rev(S[2, 4])) = LCS("a", "abb") = 1
    // LCS(S[1, 2], rev(S[3, 4])) = LCS("ab", "ab") = 2
    // LCS(S[1, 3], rev(S[4, 4])) = LCS("abb", "a") = 1
    // [2,2]
    // if 1's were 5's, return [1,5]
    
    // max potential at minlen/2
    
   vector<int> results;
    if (A.size() == 0)
    {
        results.push_back(-1);
        results.push_back(0);
        return results;
    }
    else if (A.size() == 1)
    {
        results.push_back(1);
        results.push_back(0);
        return results;
    }
    
     
    int minJ = -1;
    int maxLCS = -1;
    for (int j=1; j<A.size(); ++j)
    {
        string a = A.substr(0,j);
        string b = A.substr(j, A.size()-j);
        reverse(std::begin(b), std::end(b));
        int lcs = LCS(a, b);
        if (lcs > maxLCS)
        {
            maxLCS = lcs;
            minJ = j;
        }
    }
    
    results.push_back(minJ);
    results.push_back(maxLCS);
    
    return results;
}
