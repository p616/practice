int Solution::longestSubsequenceLength(const vector<int> &A) 
{
    if (A.size() == 0)
    {
        return 0;
    }
    
    // LIS : calculate from left to right
    int DP1[A.size()];
    DP1[0] = 1;
    for (int i=1; i<A.size(); ++i)
    {
        DP1[i] = 1;
        for (int j=0; j<i; ++j)
        {
            if ( (A[i] > A[j]) && (DP1[i] < (DP1[j] + 1)) )
            {
                DP1[i] = (DP1[j] + 1);
            }
        }
    }
    
    // LDS : calculate from right to left
    int DP2[A.size()];
    DP2[A.size()-1] = 1;
    for (int i=A.size()-2; i>=0; i--)
    {
        DP2[i] = 1;
        for (int j=A.size()-1; j>i; j--)
        {
            if ( (A[i] > A[j]) && (DP2[i] < (DP2[j] + 1)) )
            {
                DP2[i] = (DP2[j] + 1);
            }
        }
    }

    // Return the maximum value of lis[i] + lds[i] - 1
    int maxseq = (DP1[0] + DP2[0] - 1); 
    for (int i = 1; i < A.size(); i++) 
    {
        if ((DP1[i] + DP2[i] - 1) > maxseq) 
        {
            maxseq = (DP1[i] + DP2[i] - 1); 
        }
    }
    return maxseq; 
}
