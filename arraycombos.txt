// combos taken from numbers from 1..A of size B
// If n = 4 and k = 2, a solution is:
// [
//  [1,2],
//  [1,3],
//  [1,4],
//  [2,3],
//  [2,4],
//  [3,4],
// ]
// return sorted


void MakeCombos(int start, int end,
                vector<int>& currCombo, int currIndex, int comboSize,
                vector<vector<int>>& combos) 
{
    if (currIndex == comboSize)
    {
        combos.push_back(currCombo);
        return;
    }
    
    for (int i=start; i<=end; ++i)
    {
        // fix current index and recur for rest
        currCombo[currIndex] = i;
        MakeCombos(i+1, end+1, currCombo, currIndex+1, comboSize, combos);
    }
}
                     
vector<vector<int> > Solution::combine(int A, int B) 
{
    vector<vector<int>> combos;
    vector<int> curr(B);
    MakeCombos(1, ((A-B)+1), curr, 0, B, combos);
    return combos;
}
