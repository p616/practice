For k turns, take one element from input vector,
divide by 2, and put back.
Print minimum sum of elements left in v.


#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int minsum(vector<int>v, int k)
{
    sort(v.begin(), v.end(), std::greater<int>());
    
    int curr = 0;
    for (int i=0; i<k; ++i)
    {
        if ((v[curr] % 2) == 0)
        {
            v[curr] = (v[curr]/2);
        }
        else
        {
            v[curr] = ((v[curr]/2) + 1);
        }
        
        if (curr == (v.size()-1))
        {
            if (v[curr-1] > v[curr])
            {
                curr = curr-1;
            }
            else
            {
                curr = 0;
            }
        }
        else if (curr == 0)
        {
            if (v[curr+1] > v[curr])
            {
                curr = curr+1;
            }
            // else keep same          
        }
        else
        {
            	// with this line, only passed some test cases
            
		// only fix needed was the new line
            
		//if (v[curr-1] > v[curr])
            
            
	    if (v[curr-1] > v[curr] && v[curr-1] > v[curr+1])
            
	    {
                
		curr = curr-1;
            }            
            else if (v[curr+1] > v[curr])
            {
                curr = curr+1;
            }
            // else keep same
        }
    }
    
    int sum = 0;
    for (int n : v)
    {
        sum += n;
    }
    return sum;
}

int main() 
{
    vector<int> v = {2000, 100, 80, 10};
	cout << minsum(v, 7);
	return 0;
}