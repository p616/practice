#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);



int main()
{
    int N;
    cin >> N;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<vector<string>> table;

    for (int N_itr = 0; N_itr < N; N_itr++) {
        string firstNameEmailID_temp;
        getline(cin, firstNameEmailID_temp);

        vector<string> firstNameEmailID = split_string(firstNameEmailID_temp);

        string firstName = firstNameEmailID[0];

        string emailID = firstNameEmailID[1];

        vector<string> line;
        line.push_back(firstName);
        line.push_back(emailID);

        table.push_back(line);
    }
   std::sort(table.begin(), table.end(), [](vector<string> a, vector<string> b) 
      { 
        if (a[1].find("@gmail.com") == string::npos && 
            b[1].find("@gmail.com") == string::npos)
        {
          return false;
        }
        else if (a[1].find("@gmail.com") == string::npos )
        {
          return false;
        }
        else if (b[1].find("@gmail.com") == string::npos )
        {
          return true;
        }  
        else 
        {
          return a[0] < b[0];
        }    
      });

      for (vector<string> entry : table)
      {
        if (entry[1].find("@gmail.com") == string::npos)
        {
          break;
        }
        cout << entry[0] << "\n";
      }

    return 0;
}

#include <iostream>
using namespace std;

int main() {
	cout<<"GfG!";
	return 0;
}

Given a list of non negative integers, arrange them such that they form the largest number.

For example:

Given [3, 30, 34, 5, 9], the largest formed number is 9534330.


string Solution::largestNumber(const vector<int> &A) 
{
    // create a copy of const input vector and sort
    
    vector<int> sorted(A);
    
    sort(sorted.begin(), sorted.end(),
        [] (int x, int y)
        { 
            string strX = to_string(x);
            string strY = to_string(y);
            
            string XY = (strX + strY);
            string YX = (strY + strX);
            
            long intXY = atol(XY.data());
            long intYX = atol(YX.data());
    
            return (intXY > intYX);
        });
        
    // special case for all zeros
    // don't want to return "000000"
    if (sorted[0] == 0)
    {
        return "0";
    }
         
    // concat sorted ints into string
    string largest;
    for (int n : sorted)
    {
        largest += to_string(n);
    }
    
    return largest;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}


    
             // either different lengths
             // or digits differ
    
             int minlen = min(strX.length(), strY.length());
             
             for (int i = 0; i < minlen; ++i)
             {
                 if (strX[i] > strY[i])
                 {
                     return strY;
                 }
             }
             
             // different lengths
             
             string longStr = ((strX.length() == minlen) ? strY: strX);
             string shortStr = ((longStr == strX) ? strY : strX);
             
             for (int i = minlen; i < longStr.length(); ++i)
             {
                 if (longStr[i-1] < longStr[i])
                 {
                     return longStr;
                 }
             }
             
             return shortStr;
        }
    );
