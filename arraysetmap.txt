In a town, there are N people labelled from 1 to N.  
There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:
    The town judge trusts nobody.
    Everybody (except for the town judge) trusts the town judge.
    There is exactly one person that satisfies properties 1 and 2.

You are given an array of pairs trust[i] = [a, b] 
representing that the person labelled a trusts the person labelled b.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.

 
    int findJudge(int N, vector<vector<int>>& trust) 
    {
        // set of people who trust (anyone)
        set<int> notjudge;
        
        // count of peeps that trust a specific person
        // <person,count>
        map<int,int> trusted;
        
        for (int i=0; i<trust.size(); ++i)
        {
            notjudge.insert(trust[i][0]);
            trusted[(trust[i][1]-1)]++;
        }
        
        // if all peeps trust, nobody is the judge
        if (notjudge.size() == N)
        {
            return -1;
        }
        
        for (int i=0; i<N; ++i)
        {
            // if this person might be the judge 
            if (notjudge.find(i+1) == notjudge.end())
            {
                // check if everyone trusts them
                if (trusted[i] == (N-1))
                {
                    return (i+1);
                }
            }
        }
        
        return -1;        
    }