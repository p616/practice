
UTF-8:

│   ┌── 3
└── 1
    └── 2

ANSI:

¦   +-- 3
+-- 1
    +-- 2


 |    |--- 3
 |    |    |--- 6
 |--- 1
      |    |--- 5
      |--- 2
           |--- 4

#include <iostream>
#include <string>
#include <sstream>
#include <algorithm>
#include <queue>

using namespace std;

struct TreeNode 
{
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

void trimLeftTrailingSpaces(string &input) 
{
    input.erase(input.begin(), find_if(input.begin(), input.end(), [](int ch) {
        return !isspace(ch);
    }));
}

void trimRightTrailingSpaces(string &input) 
{
    input.erase(find_if(input.rbegin(), input.rend(), [](int ch) {
        return !isspace(ch);
    }).base(), input.end());
}

TreeNode* stringToTreeNode(string input) 
{
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    input = input.substr(1, input.length() - 2);
    if (!input.size()) 
    {
        return nullptr;
    }

    string item;
    stringstream ss;
    ss.str(input);

    getline(ss, item, ',');
    TreeNode* root = new TreeNode(stoi(item));
    queue<TreeNode*> nodeQueue;
    nodeQueue.push(root);

    while (true) 
    {
        TreeNode* node = nodeQueue.front();
        nodeQueue.pop();

        if (!getline(ss, item, ',')) 
        {
            break;
        }

        trimLeftTrailingSpaces(item);
        if (item != "null") 
        {
            int leftNumber = stoi(item);
            node->left = new TreeNode(leftNumber);
            nodeQueue.push(node->left);
        }

        if (!getline(ss, item, ',')) 
        {
            break;
        }

        trimLeftTrailingSpaces(item);
        if (item != "null") 
        {
            int rightNumber = stoi(item);
            node->right = new TreeNode(rightNumber);
            nodeQueue.push(node->right);
        }
    }
    return root;
}

void prettyPrintTree(TreeNode* node, string prefix = "", bool isLeft = true)
{
    if (node == nullptr) 
    {
        return;
    }

    if (node->right) 
    {
        prettyPrintTree(node->right, prefix + (isLeft ? " |   " : "    "), false);
    }

    cout << prefix + (isLeft ? " |--- " : " |--- ") + to_string(node->val) + "\n";

    if (node->left) 
    {
        prettyPrintTree(node->left, prefix + (isLeft ? "     " : " |   "), true);
    }
}

int main() 
{
    string line;
    while (getline(cin, line)) 
    {
        TreeNode* root = stringToTreeNode(line);
        prettyPrintTree(root);
    }
    return 0;
}