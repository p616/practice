xyz:

permutations: 

xyz
xzy
yxz
yzx
zxy
zyx

subsets (2^n-1) / combos of chars:
x
y
z
xy
xz
yz
xyz
        // *SUBSET MASKS */
        // 1 bits in i hold positions in string for all possible subsets 
        // 0 = empty set, (2^N)-1 = all ones
        for (int i = 1; i < pow(2,N); ++i)
		OR
 	for (int i = 0; i < (1<<N); ++i)
        {
            int mask = i;
            // 001 
            // 010 
	    // 011
            // 100 
            // 101 
	    // 110
            // 111
        }

subsequence/substring (1+2+..+n) :
x
y
z
xy
xz
xyz      
        // *SUBSTR MASKS */
        for (int i=1; i<=N; ++i)
        {
            // mask = 0010 - 1 = 001
            // mask = 0100 - 1 = 011
            // mask = 1000 - 1 = 111            
            int mask = ((1 << i) - 1);
            while (mask < pow(2,N))
            {
                // 001, 010, 100
                // 011, 110
                // 111
                mask <<= 1;             
            }  
        }
	
	// OR
        for (int i = 0; i < N; ++i)
        {
		str = ""
            for (int j = 0; j < (N-i); ++j)
            {           
                // i=0  j=0-2   (0) (0+1) (0+1+2)
                // i=1  j=0-1   (1) (1+2)
                // i=2  j=0     (2)

			str += s[i+j]
