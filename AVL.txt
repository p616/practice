/* Node is defined as :
typedef struct node
{
    int val;
    struct node* left;
    struct node* right;
    int ht;
} node; */

node * LeftRotate(node * root)
{
    if (root == nullptr)
    {
        return root;
    }
    
    node *y = root->right;
    node *z = y->left;
    
    y->left = root;
    root->right = z;

    y->ht = max(y->left ? y->left->ht : 0, 
                y->right ? y->right->ht : 0) 
            + 1;
    root->ht = max(root->left ? root->left->ht : 0, 
                   root->right ? root->right->ht : 0) 
            + 1;
    
    return y;
}

node * RightRotate(node * root)
{
    if (root == nullptr)
    {
        return root;
    }
    
    node *y = root->left;
    node *z = y->right;
    
    y->right = root;
    root->left = z;
    
    y->ht = max(y->left ? y->left->ht : 0, 
                y->right ? y->right->ht : 0) 
            + 1;
    root->ht = max(root->left ? root->left->ht : 0, 
                   root->right ? root->right->ht : 0) 
            + 1;
    return y;
}

node * insert(node * root,int val)
{
    if (root == nullptr)
    {
        root = new node();
        root->val = val;
        root->left = nullptr;
        root->right = nullptr;
        root->ht = 1;
        return root;
    }
    
    if (val < root->val)
    {
        root->left = insert(root->left, val);
    }
    else if (val > root->val)
    {
        root->right = insert(root->right, val);
    }
    // same numbers not allowed
    else
    {
        return root;
    }
    
    // update height
    root->ht = max(root->left ? root->left->ht : 0, 
                   root->right ? root->right->ht : 0) 
               + 1;
     
    // two children, calculate balance 
    int balance = (root->left ? root->left->ht : 0) - 
                  (root->right ? root->right->ht : 0);
    
    // RR
    if (balance < -1 && val > root->right->val)
    {
        return LeftRotate(root);
    }
    // LL
    else if (balance > 1 && val < root->left->val)
    {
        return RightRotate(root);
    }
    // RL
    else if (balance < -1 && val < root->right->val)
    {
        root->right = RightRotate(root->right);
        return LeftRotate(root);
    }
    // LR
    else if (balance > 1 && val > root->left->val)
    {
        root->left = LeftRotate(root->left);
        return RightRotate(root);
    }
    
    return root; 
}