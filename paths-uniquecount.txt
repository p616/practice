Given a grid of size m * n, lets assume you are starting at (1,1) and your goal is to reach (m,n). At any instance, if you are on (x,y), you can either go to (x, y + 1) or (x + 1, y).

Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Example :
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]

The total number of unique paths is 2.


void getPaths(vector<vector<int>>& grid, 
                int x, int y, int destX, int destY, 
                string currpath, set<string>& paths)
{
    if ((x == destX) && (y == destY))
    {
        paths.insert(currpath);
    }
    
    // can only move right or down so no need to invalidate + backtrack
    
    // add this cell to current path
    string p = currpath;
    if (p.size() != 0)
    {
        p += ",";
    }
    p += to_string((y*grid[0].size())+x);
    
    // try down
    if ( ((x+1) < grid.size()) && (grid[x+1][y] == 0) )
    {
        getPaths(grid, x+1, y, destX, destY, p, paths);
    }
    
    // try right
    if ( ((y+1) < grid[0].size()) && (grid[x][y+1] == 0) )
    {
        getPaths(grid, x, y+1, destX, destY, p, paths);
    }
}

int Solution::uniquePathsWithObstacles(vector<vector<int> > &A) 
{
    if (A.size() == 0)
    {
        return 0;
    }
    else if ((A.size() == 1) && (A[0].size() == 1))
    {
        return ((A[0][0] == 1) ? 0 : 1);
    }
    
    set<string> paths;
    if (A[0][0] == 0)
    {
        getPaths(A, 0, 0, A.size()-1, A[0].size()-1, "", paths);
    }
    return paths.size();
}
