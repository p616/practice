permute : print all possible orderings of a string
      ex: hat: hat hta aht ath tha tah
      ex: aaa: aaa aaa aaa aaa aaa aaa

void permute(string s, string p)
{
    // when s is empty, p contains current permutation
    if (s.empty())
    {
        cout << p.data() << endl;
        return;
    }

    for (int i = 0; i < s.length(); ++i)
    {
        // append each char to end of current permutation one by one
        // and permute the remaining characters 
        permute(s.substr(0,i) + s.substr(i+1,s.length()-i-1), p + s[i]);
    }
}


int main()
{
    permute("hat", "");
    return 0;
}

// OR
void permute(char *s, int left, int right)
{
    // when s is empty, p contains current permutation
    if (left == right)
    {
        cout << s.data() << endl;
        return;
    }

    for (int i = left; i < right; ++i)
    {
        // append each char to end of current permutation one by one
        // and permute the remaining characters 
        swap(s + left, s + i);
        permute(s, left + 1, right);
        swap(s + left, s + i);
    }
}