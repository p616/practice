Given a collection of numbers, return all possible permutations.

Example:

[1,2,3] will have the following permutations:

[1,2,3]
[1,3,2]
[2,1,3] 
[2,3,1] 
[3,1,2] 
[3,2,1]


- No two entries in the permutation sequence should be the same.
- For the purpose of this problem, assume that all the numbers in the collection are unique.


void _permute(vector<int> &v, int pos, vector<vector<int> > &ret)
{
    if (pos == (v.size()-1))
    {
        // done
        ret.push_back(v);
    }
    
    for (int i=pos; i<v.size(); ++i)
    {
        // fix first pos
        int temp = v[pos];
        v[pos] = v[i];
        v[i] = temp;
        
        // permute rest
        _permute(v, pos+1, ret);
        
        //backtrack
        v[i] = v[pos];
        v[pos] = temp;
    }
}

vector<vector<int> > Solution::permute(vector<int> &A) 
{
   vector<vector<int> > ret;
   _permute(A, 0, ret);
   return ret;
}
