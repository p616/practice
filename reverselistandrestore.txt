Given a singly linked list, modify the value of first half nodes such that :

    1st node’s new value = the last node’s value - first node’s current value
    2nd node’s new value = the second last node’s value - 2nd node’s current value
    etc.

1. use slow/fast pointer to find mid
2. reverse first half of list along the way
3. reset fast pointer to midway 
4. now fast->next moves fwd and slow->next moves back
5. unreverse while performing the SUBTRACT


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* subtract(ListNode* A) 
{
    if (A == NULL)
    {
        return NULL;
    }
    
    ListNode *pSlow = A;    // 0-1-2-3...
    ListNode *pFast = A;    // 0-2-4-6...
    
    // save prev node to slow pointer to reverse list
    ListNode *pSlowPrev = NULL;

    while (pFast->next != NULL && pFast->next->next != NULL)
    {
        // incrememnt fast pointer
        pFast = pFast->next->next;
        
        // incrememnt slow pointer and reverse current next pointer
        ListNode *pTemp = pSlow->next;
        pSlow->next = pSlowPrev;
        pSlowPrev = pSlow;
        pSlow = pTemp;
    }
    
    
    // set up for SUBTRACT and reverse undo dep on odd or even nodes
    if (pFast->next == NULL)
    {
        // odd
        
        // move end pointer to mid+1
        pFast = pSlow->next;
        
         // move front pointer to mid-1
        // update prev for reverse restore
        ListNode *pTemp = pSlow;
        pSlow = pSlowPrev;
        pSlowPrev = pTemp;
    }
    else
    {
        // even
        
        // move end pointer to mid+1
        pFast = pSlow->next;
        
        // front pointer in right spot
        // update next to complete reverse
        // update prev for reverse restore
        ListNode *pTemp = pSlowPrev;
        pSlowPrev = pSlow->next;
        pSlow->next = pTemp;
    }
    
    // dp the SUBTRACT and restore next pointers
    while (pFast != NULL)
    {
        // update front node's data
        pSlow->val = (pFast->val - pSlow->val);
        
        // increment end
        pFast = pFast->next;
        
        // decrement front (next is prev) and un-reverse
        ListNode *pTemp = pSlow;
        pSlow = pSlow->next; 
        pTemp->next = pSlowPrev;
        pSlowPrev = pTemp;
     }
     
     return A;
}
