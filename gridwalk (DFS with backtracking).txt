 In a N x N grid representing a field of cherries, each cell is one of three possible integers.

0 means the cell is empty, so you can pass through;
1 means the cell contains a cherry, that you can pick up and pass through;
-1 means the cell contains a thorn that blocks your way.

Your task is to collect maximum number of cherries possible by following the rules below:

Starting at the position (0, 0) and reaching (N-1, N-1) by moving right or down through valid path cells (cells with value 0 or 1);
After reaching (N-1, N-1), returning to (0, 0) by moving left or up through valid path cells;
When passing through a path cell containing a cherry, you pick it up and the cell becomes an empty cell (0);
If there is no valid path between (0, 0) and (N-1, N-1), then no cherries can be collected.

Input: grid =
[[0, 1, -1],
 [1, 0, -1],
 [1, 1,  1]]
Output: 5
Explanation: 
The player started at (0, 0) and went down, down, right right to reach (2, 2).
4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].
Then, the player went left, up, up, left to return home, picking up one more cherry.
The total number of cherries picked up is 5, and this is the maximum possible.

    struct ValidPath
    {
        // D = down, R = right
        string path;
        int cherries;
        
        ValidPath(string s, int n) : path(s), cherries(n) {}
    };
    
    bool IsValidCell(vector<vector<int>>& grid, int N, int x, int y)
    {
        return (x >=0 && y >=0 && x < N && y < N && grid[x][y] != -1);
    }
    
    void GetAllPaths(vector<vector<int>>& grid, int x, int y, string path, int& cherries, vector<ValidPath*>& validPaths)
    {
        // end case - found a valid path through
        // save it in the validPaths vector
        if (x == grid.size()-1 && y == grid.size()-1)
        {
            ValidPath *vp = new ValidPath(path, cherries);
            validPaths.push_back(vp); 
            return;
        }
                
        // try to navigate in each of two valid directions forward : down ("D") and right ("R")
        // add cherries to running total for path and append direction to path so far
        // backtrack on return
        
        // no way pass through same cell twice following one path in the forward direction, 
        // so no need to modify grid cell for cherries picked, although
        // same cell could be included in more than one path
        
        // down
        if (IsValidCell(grid, grid.size(), x+1, y))
        {
            cherries += grid[x+1][y];
            
            GetAllPaths(grid, x+1, y, path + "D", cherries, validPaths);
            
            // backtrack
            cherries -= grid[x+1][y];
        }
        
        // right
        if (IsValidCell(grid, grid.size(), x, y+1))
        {
            cherries += grid[x][y+1];
            
            GetAllPaths(grid, x, y+1, path + "R", cherries, validPaths);
            
            // backtrack
            cherries -= grid[x][y+1];
        }    
    }    
    
    int cherryPickup(vector<vector<int>>& grid) 
    {
        vector<ValidPath*> paths;
        
        string path;
        int cherries = 0;
        
        if (grid.size() == 1)
        {
            return grid[0][0];
        }
            
        // get all valid paths from 0,0 to N-1,N-1 
        //  and count of cherries in each path
        GetAllPaths(grid, 0, 0, path, cherries, paths);
        
        if (paths.size() == 0)
        {
            return 0;
        }
        
        // sort valid paths by cherry count
        sort(paths.begin(), paths.end(), [] (ValidPath *a, ValidPath *b) 
					{ return a->cherries > b->cherries; });
        
        if (paths.size() < 2)
        {
            // picked all cherries fwd, none left back
            return paths[0]->cherries;
        }
       
        // clear picked cherries from forward path
        ValidPath *fwd = paths[0];

        int x = 0;
        int y = 0;
        
        for (char c : fwd->path)
        {
            if (c == 'D') x = x+1;
            if (c == 'R') y = y+1;
            grid[x][y] = 0;
        }
        
        // recalc backward paths now that fwd was cleared, find MAX
        
        int maxCherries = numeric_limits<int>::min();
        
        for (int i=1; i < paths.size(); ++i)
        {
            ValidPath *back = paths[i];

            int backCherries = 0;
            
            x = grid.size() - 1;
            y = grid.size() - 1;
            
            auto it = back->path.end();            
            while (it >= back->path.begin())
            {               
                if (*it == 'D') x = x-1;
                if (*it == 'R') y = y-1;
                backCherries += grid[x][y];
                
                it--;
            }
            
            maxCherries = max(maxCherries, backCherries);
        }

        maxCherries += fwd->cherries;
        
        return maxCherries;         
    }      